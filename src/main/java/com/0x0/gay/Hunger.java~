package com.OxO.gay;

import co.aikar.commands.PaperCommandManager;
import kr.entree.spigradle.annotations.PluginMain;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.Accessors;
import net.milkbowl.vault.chat.Chat;
import net.milkbowl.vault.economy.Economy;
import com.OxO.gay.commands.*;
import com.OxO.gay.integrations.vault.VaultProvider;
import org.bukkit.Bukkit;
import org.bukkit.configuration.InvalidConfigurationException;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.server.ServiceRegisterEvent;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.RegisteredServiceProvider;
import org.bukkit.plugin.java.JavaPlugin;
import java.io.File;
import java.io.IOException;
import java.util.Locale;
import java.util.Objects;
import com.OxO.gay.listeners.*;
import com.OxO.gay.ammo.*;

public class TestBench extends JavaPlugin implements Listener {

    @Getter
    @Accessors(fluent = true)
    private static TestBench instance;
    @Getter
    @Setter(AccessLevel.PACKAGE)
    private VaultProvider vault;
    private PaperCommandManager commandManager;

    public TestBench() {
        instance = this;
    }
    public static TestBench getInstance() {
	return instance;
    }

    @Override
    public void onEnable() {
        saveDefaultConfig();

        setupVaultIntegration();
        setupCommands();
	Bullets.init(this);
        Shells.init(this);
	getServer().getPluginManager().registerEvents(new Pistol(), this);
	new FoodListener(this);
	new KeyCardListener(this);
	getServer().getPluginManager().registerEvents(new Shotgun(), this);
	getServer().getPluginManager().registerEvents(new RocketLauncher(), this);
        getServer().getPluginManager().registerEvents(this, this);
    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        getLogger().info("Player joined.");
    }

    @EventHandler
    public void onServiceRegistration(ServiceRegisterEvent event) {
        if (event.getProvider().getService() == Economy.class) {
            setVault(new VaultProvider((Economy) event.getProvider().getProvider()));
            getLogger().info("Vault integration enabled.");
        }
    }

    private void setupVaultIntegration() {
        if (Bukkit.getPluginManager().isPluginEnabled("Vault")) {
            final RegisteredServiceProvider<Economy> serviceProvider = getServer().getServicesManager()
                .getRegistration(Economy.class);
            if (serviceProvider != null) {
                vault = new VaultProvider(Objects.requireNonNull(serviceProvider).getProvider());
                getLogger().info("Vault integration enabled.");
            }
        }
        if (vault == null) {
            vault = new VaultProvider();
            getLogger().warning("Vault integration is not yet available.");
        }
    }

    private void setupCommands() {
        commandManager = new PaperCommandManager(this);
        commandManager.enableUnstableAPI("help");

        loadCommandLocales(commandManager);

        this.getServer().getCommandMap().register("doom", new Head("head"));
        this.getServer().getCommandMap().register("doom", new Commands("idclev"));
        this.getServer().getCommandMap().register("doom", new Test("test"));
        this.getServer().getCommandMap().register("doom", new Test2("test2"));
    }

    // see https://github.com/aikar/commands/wiki/Locales
    private void loadCommandLocales(PaperCommandManager commandManager) {
        try {
            saveResource("lang_en.yaml", true);
            commandManager.getLocales().setDefaultLocale(Locale.ENGLISH);
            commandManager.getLocales().loadYamlLanguageFile("lang_en.yaml", Locale.ENGLISH);
            // this will detect the client locale and use it where possible
            commandManager.usePerIssuerLocale(true);
        } catch (IOException | InvalidConfigurationException e) {
            getLogger().severe("Failed to load language config 'lang_en.yaml': " + e.getMessage());
            e.printStackTrace();
        }
    }
}
